Transform: AWS::Serverless-2016-10-31

Description: API for Kanban

Globals:
  Function:
    CodeUri: app/
    PackageType: Zip
    Timeout: 10
    Runtime: ruby2.7
    MemorySize: 128
    Environment:
      Variables:
        KANBAN_TABLE: !Ref KanbanTable

Resources:
  KanbanApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: production
      Auth:
        DefaultAuthorizer: KanbanUsersAuthorizer
        Authorizers:
          KanbanUsersAuthorizer:
            UserPoolArn: !GetAtt KanbanUserPool.Arn

  KanbanTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: kanban
      AttributeDefinitions:
      - AttributeName: User
        AttributeType: S
      - AttributeName: ListsAndCardsCollection
        AttributeType: S
      KeySchema:
      - AttributeName: User
        KeyType: HASH
      - AttributeName: ListsAndCardsCollection
        KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  KanbanUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: Kanban Users
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
  KanbanUserClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref KanbanUserPool
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - http://localhost:3000
      AllowedOAuthScopes:
        - openid
        - email
      AllowedOAuthFlows:
        - implicit
      SupportedIdentityProviders:
        - COGNITO
  KanbanUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: kanban-api
      UserPoolId: !Ref KanbanUserPool

  FetchLists:
    Type: AWS::Serverless::Function
    Properties:
      Handler: fetch_lists.FetchLists.handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref KanbanTable
      Events:
        Invoke:
          Type: Api
          Properties:
            Method: GET
            Path: /lists
            RestApiId: !Ref KanbanApi
  FetchCards:
    Type: AWS::Serverless::Function
    Properties:
      Handler: fetch_cards.FetchCards.handler
      Timeout: 10
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref KanbanTable
      Events:
        Invoke:
          Type: Api
          Properties:
            Method: GET
            Path: /lists/{listUUID}
            RestApiId: !Ref KanbanApi
  CreateList:
    Type: AWS::Serverless::Function
    Properties:
      Handler: create_list.CreateList.handler
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref KanbanTable
      Events:
        Invoke:
          Type: Api
          Properties:
            Method: POST
            Path: /lists
            RestApiId: !Ref KanbanApi
  CreateCard:
    Type: AWS::Serverless::Function
    Properties:
      Handler: create_card.CreateCard.handler
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref KanbanTable
      Events:
        Invoke:
          Type: Api
          Properties:
            Method: POST
            Path: /lists/{listUUID}/cards
            RestApiId: !Ref KanbanApi

Outputs:
  LambdaProjectApiUrl:
    Description: Kanban API URL
    Value: !Sub https://${KanbanApi}.execute-api.${AWS::Region}.amazonaws.com/
  Register:
    Value: !Sub https://${KanbanUserPoolDomain}.auth.${AWS::Region}.amazoncognito.com/signup?client_id=${KanbanUserClient}&response_type=token&scope=openid&redirect_uri=http://localhost:3000
    Description: Register page
  Login:
    Value: !Sub https://${KanbanUserPoolDomain}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${KanbanUserClient}&response_type=token&scope=openid&redirect_uri=http://localhost:3000
    Description: Login page
